# Builds on all branches & PRs
# Deploys to PyPi on new tags.
name: Build, test and publish

on: [ push, pull_request ]

jobs:
  test:
    runs-on: ubuntu-24.04
    name: Runs tests
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.11" , "3.12" , "3.13" ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Test with tox
        run: tox
        working-directory: tests
        env:
          RUSTUP_TOOLCHAIN: stable
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Pytest Test Results (Python ${{ matrix.python-version }})
          path: tests/pytest.xml
  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: artifacts/**/*.xml
  build-sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build SDist
        run: pipx run build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist/*.tar.gz
  build:
    runs-on: ${{ matrix.os }}
    name: Build Wheels
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          # very slow:
          #- os: ubuntu-latest
          #  arch: arm64
          - os: macos-12
            arch: x86_64
          - os: macos-12
            arch: arm64
          - os: windows-2019
            arch: x86
          - os: windows-2019
            arch: AMD64
    steps:
      # For tags we assume the version in pyproject.toml is correct!
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        shell: bash
        run: |
          perl -i -pe "s/version\s*=\s*\"(.*?)(\.rc.*|\.a.*|\.post.*)?\"/version=\"\1.dev0+${GITHUB_SHA::8}\"/" pyproject.toml
      - name: Note version
        if: matrix.os != 'windows-2019'
        shell: bash
        run: |
          python3 -m venv .yq-venv
          . .yq-venv/bin/activate
          pip install yq
          echo "PACKAGE_VERSION=$(tomlq '.project.version' pyproject.toml -r)" >> $GITHUB_ENV
      - name: Note version (Windows)
        if: matrix.os == 'windows-2019'
        run: |
          pipx install yq
          $env:PACKAGE_VERSION = tomlq.exe '.project.version' pyproject.toml -r
          echo "PACKAGE_VERSION=$env:PACKAGE_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        if: runner.os != 'Linux'
        with:
          target: "${{ matrix.os == 'windows-2019' && 'i686-pc-windows-msvc' || ( matrix.arch == 'arm64' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin') }}"
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_SKIP: "*musllinux*"
          CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y"
          CIBW_ENVIRONMENT_LINUX: 'PATH="$PATH:$HOME/.cargo/bin"'
          CIBW_ARCHS: ${{ matrix.arch }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*.whl
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
    runs-on: ubuntu-latest
    name: Deploy wheels to PyPI
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
          pip install twine
      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USR }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PSW }}
        run: |
          twine upload wheels*/*.whl wheels*/*.tar.gz
