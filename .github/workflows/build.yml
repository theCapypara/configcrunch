# Builds on all branches & PRs
# Deploys to PyPi on new tags.
name: Build, test and publish

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Runs tests
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.6", "3.7", "3.8", "3.9", "3.10", "3.11" ]
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
    - name: Test with tox
      run: tox
      env:
        RUSTUP_TOOLCHAIN: nightly
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Pytest Test Results (Python ${{ matrix.python-version }})
        path: pytest.xml
  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: artifacts/**/*.xml
  build_linux:
    needs: test
    runs-on: ubuntu-latest
    name: Linux Wheels
    steps:
      # For tags we assume the version in setup.py is correct!
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          perl -i -pe "s/__version__\s*=\s*'(.*?)(\.rc.*|\.a.*|\.post.*)?'/__version__='\1.dev0+${GITHUB_SHA::8}'/" setup.py
      - name: Note version
        run: |
          echo "PACKAGE_VERSION=$(python3 -- ./setup.py --version)" >> $GITHUB_ENV
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
      - name: Build Python wheels
        uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2010_x86_64
        with:
          python-versions: 'cp37-cp37m cp38-cp38 cp39-cp39 cp310-cp310 cp311-cp311'
          pre-build-command: 'source ./build-manylinux.sh'
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels-linux
          path: dist/*.whl
  build_macos_windows:
    needs: test
    runs-on: ${{ matrix.os }}
    name: Mac/Win Wheel
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, windows-2019 ]
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11' ]
        arch: [ 'x64', 'x86' ]
        exclude:
          - os: macos-11
            arch: 'x86'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        shell: bash
        run: |
          perl -i -pe "s/__version__\s*=\s*'(.*?)(\.rc.*|\.a.*|\.post.*)?'/__version__='\1.dev0+${GITHUB_SHA::8}'/" setup.py
      - name: Note version
        shell: bash
        run: |
          echo "PACKAGE_VERSION=$(python3 -- ./setup.py --version)" >> $GITHUB_ENV
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          target: "${{ matrix.os == 'windows-2019' && 'i686-pc-windows-msvc' || 'x86_64-apple-darwin' }}"
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}
      - name: Upgrade pip, install dev dependencies
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r requirements.txt
      - name: Build Python wheels
        run: |
          python setup.py bdist_wheel
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.arch }}
          path: dist/*.whl
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
    - build_linux
    - build_macos_windows
    runs-on: ubuntu-latest
    name: Deploy wheels to PyPI
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
          pip install twine
      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USR }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PSW }}
        run: |
          twine upload wheels-linux/*manylinux*.whl wheels-windows*/*.whl wheels-macos*/*.whl
